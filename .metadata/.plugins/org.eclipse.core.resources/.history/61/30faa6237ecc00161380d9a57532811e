package ctc.traccar.web.rest.controllers;




import java.math.BigInteger;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import ctc.traccar.api.vos.GeofenceVo;
import ctc.traccar.api.vos.ReportVo;
import ctc.traccar.api.vos.UserSettingVo;
import ctc.traccar.api.vos.UserVo;
import ctc.traccar.business.helpers.JsonParserHelper;
import ctc.traccar.business.interfaces.UserServiceInt;

@RestController
@RequestMapping("/User")
public class UserController {

		@SuppressWarnings("unused")
		private static Logger logger = Logger.getLogger(UserController.class);
		
		@Autowired
		private UserServiceInt userService;
		
		@ModelAttribute("UserVo")
	    public UserVo getUserVo(){
	        return new UserVo();
	    }
		
		
		@RequestMapping(value="/Email/{email}",method=RequestMethod.GET,produces="application/json")
		@ResponseBody
		public String GetUserByEmail(@PathVariable(value="email") String email) {
			String response = "";
			
			try {
				
				UserVo vo = new UserVo();
				vo.setEmail(email);
				List<UserVo> res = userService.getByEmail(vo);
				response = JsonParserHelper.toJson(res);
			
			}catch(Exception e){
				
				response = e.getMessage();
			}
			return response;
					
		}
		
		@RequestMapping(value="/{IdNumber}",method=RequestMethod.GET,produces="application/json")
		@ResponseBody
		public String GetUserById(@PathVariable(value="IdNumber") String id) {
			String response = "";
			
			try {
				BigInteger Id = new BigInteger(id);
				UserVo vo = new UserVo();
				vo.setId(Id);
				vo =  userService.getById(vo);
				response = JsonParserHelper.toJson(vo);
				
			}catch(Exception e){
				
				response = e.getMessage();
			}
			return response;
					
		}
		
		@RequestMapping(method=RequestMethod.GET,produces="application/json")
		@ResponseBody
		public String GetAllUsers() {
			String response = "";
			try {
				List<UserVo> result =  userService.getAll();
				response = JsonParserHelper.toJson(result);
			}catch(Exception e){
				
				response = e.getMessage();
			}
			return response;
					
		}
		
		@RequestMapping(value="/{IdNumber}/Geofences",method=RequestMethod.GET,produces="application/json")
		@ResponseBody
		public String GetUserGeofences(@PathVariable(value="IdNumber") String id) {
			String response = "";
			
			try {
				
				BigInteger Id = new BigInteger(id);
				UserVo vo = new UserVo();
				vo.setId(Id);
				
				List<GeofenceVo> results =  userService.getGeofences(vo);
				response = JsonParserHelper.toJson(results);
				
			}catch(Exception e){
				
				response = e.getMessage();
			}
			return response;
					
		}
		
		@RequestMapping(value="/{IdNumber}/Reports",method=RequestMethod.GET,produces="application/json")
		@ResponseBody
		public String GetUserReports(@PathVariable(value="IdNumber") String id) {
			String response = "";
			
			try {
				
				BigInteger Id = new BigInteger(id);
				UserVo vo = new UserVo();
				vo.setId(Id);
				
				List<ReportVo> results =  userService.getReports(vo);
				response = JsonParserHelper.toJson(results);
				
			}catch(Exception e){
				
				response = e.getMessage();
			}
			return response;
					
		}
		
		@RequestMapping(value="/{IdNumber}/UserSettings",method=RequestMethod.GET,produces="application/json")
		@ResponseBody
		public ResponseEntity<UserSettingVo> GetUserSettings(@PathVariable(value="IdNumber") String id) {
			String response = "";
			
			try {
				
				BigInteger Id = new BigInteger(id);
				UserVo vo = new UserVo();
				vo.setId(Id);
				
				UserSettingVo results =  userService.getUserSetting(vo);
				
			}catch(Exception e){
				
				response = e.getMessage();
			}
			return response;
					
		}
		
		@RequestMapping(value="/login",method=RequestMethod.POST,produces="application/json")
		@ResponseBody
		public ResponseEntity<UserVo> GetUserSettings(@RequestBody UserVo vo) {

			try {
				
				UserVo result = userService.login(vo);
			
				if(result != null){
					
					return new ResponseEntity<UserVo>(result, HttpStatus.OK);
				
				}else{
				
					return new ResponseEntity<UserVo>(HttpStatus.OK);
				
				}
				
			}catch(Exception e){
				
				return new ResponseEntity<UserVo>(HttpStatus.INTERNAL_SERVER_ERROR);
			}
			
					
		}
}
