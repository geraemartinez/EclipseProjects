package ctc.traccar.web.rest.controllers;

import java.math.BigInteger;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import ctc.traccar.api.vos.ApplicationSettingVo;
import ctc.traccar.api.vos.UserSettingVo;
import ctc.traccar.business.helpers.JsonParserHelper;
import ctc.traccar.business.interfaces.ApplicationSettingsServiceInt;

@RestController
@RequestMapping("/api/ApplicationSetting")
public class ApplicationSettingController {

	private static Logger logger = Logger.getLogger(ApplicationSettingController.class);

	@Autowired ApplicationSettingsServiceInt service;
	
	@ModelAttribute("DeviceVo")
    public ApplicationSettingVo getApplicationSettingVo(){
        return new ApplicationSettingVo();
    }
	
	@RequestMapping(method=RequestMethod.GET)
	public ResponseEntity<?> getAllApplicationSettings() {
		HttpHeaders responseHeaders = new HttpHeaders();
		responseHeaders.add("Content-Type", "application/json; charset=utf-8");
		
		try {
			
			List<ApplicationSettingVo> result =  service.getAllApplicationSettings();
			return new ResponseEntity<>(JsonParserHelper.toJson(result),responseHeaders,HttpStatus.OK);
		
		}catch(Exception e){

			String error="[ERROR] Uncaught Exception - Internal server error at getAllApplicationSettings: " + e.getMessage();
			String JsonError = "{ \"error\": \"" + error +"\"";
			logger.error(error);
			return new ResponseEntity<>(JsonError,responseHeaders,HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@RequestMapping(value="/{IdNumber}",method=RequestMethod.GET)
	public ResponseEntity<?> getApplicationSettingById(@PathVariable(value="IdNumber") String id) {
		HttpHeaders responseHeaders = new HttpHeaders();
		responseHeaders.add("Content-Type", "application/json; charset=utf-8");
		
		try {
			ApplicationSettingVo app = new ApplicationSettingVo(new BigInteger(id));
			ApplicationSettingVo result =  service.getApplicationSettingById(app);
			return new ResponseEntity<>(JsonParserHelper.toJson(result),responseHeaders,HttpStatus.OK);
		
		}catch(Exception e){

			String error="[ERROR] Uncaught Exception - Internal server error at getApplicationSettingById: " + e.getMessage();
			String JsonError = "{ \"error\": \"" + error +"\"";
			logger.error(error);
			return new ResponseEntity<>(JsonError,responseHeaders,HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@RequestMapping(value="/{IdNumber}/UserSetting",method=RequestMethod.GET)
	public ResponseEntity<?> getUserSettingByApplicationSetting(@PathVariable(value="IdNumber") String id) {
		HttpHeaders responseHeaders = new HttpHeaders();
		responseHeaders.add("Content-Type", "application/json; charset=utf-8");
		
		try {
			ApplicationSettingVo app = new ApplicationSettingVo(new BigInteger(id));
			UserSettingVo result =  service.getUserSettingByApplicationSetting(app);
			return new ResponseEntity<>(JsonParserHelper.toJson(result),responseHeaders,HttpStatus.OK);
		
		}catch(Exception e){

			String error="[ERROR] Uncaught Exception - Internal server error at getUserSettingByApplicationSetting: " + e.getMessage();
			String JsonError = "{ \"error\": \"" + error +"\"";
			logger.error(error);
			return new ResponseEntity<>(JsonError,responseHeaders,HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@RequestMapping(value="/UserSetting/{IdNumber}/",method=RequestMethod.GET)
	public ResponseEntity<?> getApplicationSettingByUserSettingId(@PathVariable(value="IdNumber") String id) {
		HttpHeaders responseHeaders = new HttpHeaders();
		responseHeaders.add("Content-Type", "application/json; charset=utf-8");
		
		try {
			UserSettingVo app = new UserSettingVo();
			app.setId(new BigInteger(id));
			ApplicationSettingVo result =  service.getApplicationSettingByUserSettingId(app);
			return new ResponseEntity<>(JsonParserHelper.toJson(result),responseHeaders,HttpStatus.OK);
		
		}catch(Exception e){

			String error="[ERROR] Uncaught Exception - Internal server error at getApplicationSettingByUserSettingId: " + e.getMessage();
			String JsonError = "{ \"error\": \"" + error +"\"";
			logger.error(error);
			return new ResponseEntity<>(JsonError,responseHeaders,HttpStatus.INTERNAL_SERVER_ERROR);
		}
	} 
	
}
