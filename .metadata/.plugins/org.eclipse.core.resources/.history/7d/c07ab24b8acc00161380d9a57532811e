package ctc.traccar.web.rest.controllers;




import java.math.BigInteger;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import ctc.traccar.api.vos.GeofenceVo;
import ctc.traccar.api.vos.ReportVo;
import ctc.traccar.api.vos.UserSettingVo;
import ctc.traccar.api.vos.UserVo;
import ctc.traccar.business.helpers.JsonParserHelper;
import ctc.traccar.business.interfaces.UserServiceInt;

@RestController
@RequestMapping("/User")
public class UserController {

		private static Logger logger = Logger.getLogger(UserController.class);
		
		@Autowired
		private UserServiceInt userService;
		
		@ModelAttribute("UserVo")
	    public UserVo getUserVo(){
	        return new UserVo();
	    }
		
		
		@RequestMapping(value="/Email/{email}",method=RequestMethod.GET)
		public  ResponseEntity<?> GetUserByEmail(@PathVariable(value="email") String email) {			
			try {
			
				HttpHeaders responseHeaders = new HttpHeaders();
				responseHeaders.add("Content-Type", "application/json; charset=utf-8");
				
				UserVo vo = new UserVo(email);
				List<UserVo> res = userService.getByEmail(vo);
				
				return new ResponseEntity<>(JsonParserHelper.toJson(res),responseHeaders,HttpStatus.OK);
			
			}catch(Exception e){
				String error = "[ERROR] Uncaught Exception - Internal server error at GetUserById: " + e.getMessage();
				String JsonError = "{ \"error\": \"" + error +"\"";
				logger.error(error);
				return new ResponseEntity<>(JsonError,HttpStatus.INTERNAL_SERVER_ERROR);
			}
					
		}
		
		@RequestMapping(value="/{IdNumber}",method=RequestMethod.GET,produces="application/json")
		public ResponseEntity<?> GetUserById(@PathVariable(value="IdNumber") String id) {
			
			try {

				HttpHeaders responseHeaders = new HttpHeaders();
				responseHeaders.add("Content-Type", "application/json; charset=utf-8");

				BigInteger Id = new BigInteger(id);
				UserVo vo = new UserVo(Id);				
				vo =  userService.getById(vo);
				
				return new ResponseEntity<>(JsonParserHelper.toJson(vo),responseHeaders,HttpStatus.OK);
				
			}catch(Exception e){
				String error = "[ERROR] Uncaught Exception - Internal server error at GetUserById: " + e.getMessage();
				String JsonError = "{ \"error\": \"" + error +"\"";
				logger.error(error);
				return new ResponseEntity<>(JsonError,HttpStatus.INTERNAL_SERVER_ERROR);			
			}
			
					
		}
		
		@RequestMapping(method=RequestMethod.GET,produces="application/json")		
		public ResponseEntity<?> GetAllUsers() {

			try {
			
				List<UserVo> result =  userService.getAll();
				return new ResponseEntity<>(JsonParserHelper.toJson(result),HttpStatus.OK);
			
			}catch(Exception e){

				String error="[ERROR] Uncaught Exception - Internal server error at GetAllUsers: " + e.getMessage();
				String JsonError = "{ \"error\": \"" + error +"\"";
				logger.error(error);
				return new ResponseEntity<>(JsonError,HttpStatus.INTERNAL_SERVER_ERROR);
				
			}
			
					
		}
		
		@RequestMapping(value="/{IdNumber}/Geofences",method=RequestMethod.GET,produces="application/json")
		public ResponseEntity<?> GetUserGeofences(@PathVariable(value="IdNumber") String id) {
			try {
				
				BigInteger Id = new BigInteger(id);
				UserVo vo = new UserVo(Id);
				List<GeofenceVo> results =  userService.getGeofences(vo);
				return new ResponseEntity<>(JsonParserHelper.toJson(results),HttpStatus.OK);
				
			}catch(Exception e){
				
				String error ="[ERROR] Uncaught Exception - Internal server error at GetUserGeofences: " + e.getMessage();
				String JsonError = "{ \"error\": \"" + error +"\"";
				logger.error(error);
				return new ResponseEntity<>(JsonError,HttpStatus.INTERNAL_SERVER_ERROR);
			}
					
		}
		
		@RequestMapping(value="/{IdNumber}/Reports",method=RequestMethod.GET,produces="application/json")
		public ResponseEntity<?> GetUserReports(@PathVariable(value="IdNumber") String id) {			
			try {
				
				BigInteger Id = new BigInteger(id);
				UserVo vo = new UserVo(Id);
				List<ReportVo> results =  userService.getReports(vo);
				return new ResponseEntity<List<ReportVo>>(results,HttpStatus.OK);
				
			}catch(Exception e){
				
				String error = "[ERROR] Uncaught Exception - Internal server error at GetUserReports: " + e.getMessage();
				String JsonError = "{ \"error\": \"" + error +"\"";
				logger.error(error);
				return new ResponseEntity<>(JsonError,HttpStatus.INTERNAL_SERVER_ERROR);
			}
					
		}
		
		@RequestMapping(value="/{IdNumber}/UserSettings",method=RequestMethod.GET,produces="application/json")	
		public ResponseEntity<?> GetUserSettings(@PathVariable(value="IdNumber") String id) {
			try {
				
				BigInteger Id = new BigInteger(id);
				UserVo vo = new UserVo(Id);
				UserSettingVo results =  userService.getUserSetting(vo);
				return new ResponseEntity<UserSettingVo>(results,HttpStatus.OK);
				
			}catch(Exception e){
				String error = "[ERROR] Uncaught Exception - Internal server error at GetUserSettings: " + e.getMessage();
				String JsonError = "{ \"error\": \"" + error +"\"";
				logger.error(error);
				return new ResponseEntity<>(JsonError,HttpStatus.INTERNAL_SERVER_ERROR);
			}
					
		}
		
		@RequestMapping(value="/login",method=RequestMethod.POST,produces="application/json")
		public ResponseEntity<?> GetUserAccess(@RequestBody UserVo vo) {

			try {
				
				UserVo result = userService.login(vo);
				return new ResponseEntity<UserVo>(result, HttpStatus.OK);
				
			}catch(Exception e){
				String error = "[ERROR] Uncaught Exception - Internal server error at GetUserAccess: " + e.getMessage();
				String JsonError = "{ \"error\": \"" + error +"\"";
				logger.error(error);
				return new ResponseEntity<>(JsonError,HttpStatus.INTERNAL_SERVER_ERROR);
			}
			
		}
}
